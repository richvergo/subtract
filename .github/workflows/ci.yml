name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npm run type-check

      - name: Run ESLint with unused imports check
        run: npm run lint

      - name: Run ESLint unused imports specifically
        run: npm run lint:unused

      - name: Run tests with coverage
        run: npm run coverage:threshold

      - name: Check for dead code with depcheck
        run: npm run dead-code

      - name: Run integration tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./test.db"
          ENCRYPTION_KEY: "test-encryption-key-32-chars-long"
          NEXTAUTH_SECRET: "test-nextauth-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          REDIS_HOST: "localhost"
          REDIS_PORT: "6379"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerable dependencies
        run: npx audit-ci --config audit-ci.json

  dead-code-detection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run depcheck for unused dependencies
        run: npx depcheck --json > depcheck-results.json

      - name: Check depcheck results
        run: |
          if [ -s depcheck-results.json ]; then
            echo "‚ùå Unused dependencies found:"
            cat depcheck-results.json
            exit 1
          else
            echo "‚úÖ No unused dependencies found"
          fi

      - name: Run TypeScript unused locals/parameters check
        run: npx tsc --noEmit --noUnusedLocals --noUnusedParameters

  legacy-documentation-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for banned legacy terms
        run: |
          echo "üîç Checking for banned legacy terms in documentation..."
          
          # Define banned legacy terms
          BANNED_TERMS=(
            "enhanced-recorder-fixed"
            "use-enhanced-recording"
            "summarize-workflow"
            "Recording Guide"
            "Legacy wizard"
            "create-simple"
            "record-enhanced"
            "record-events"
          )
          
          # Check all markdown files
          FAILED_CHECKS=0
          
          for term in "${BANNED_TERMS[@]}"; do
            echo "Checking for: $term"
            if grep -r -i "$term" --include="*.md" --include="*.MD" .; then
              echo "‚ùå Found banned legacy term: $term"
              FAILED_CHECKS=1
            else
              echo "‚úÖ No instances of: $term"
            fi
          done
          
          if [ $FAILED_CHECKS -eq 1 ]; then
            echo "‚ùå Legacy documentation check failed. Please remove references to banned terms."
            exit 1
          else
            echo "‚úÖ All legacy documentation checks passed"
          fi

      - name: Check markdownlint compliance
        run: |
          echo "üìù Checking markdownlint compliance..."
          
          # Install markdownlint if not available
          if ! command -v markdownlint &> /dev/null; then
            npm install -g markdownlint-cli
          fi
          
          # Run markdownlint on all markdown files
          markdownlint "**/*.md" --ignore node_modules --ignore .git --ignore archive/

  legacy-frontend-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for banned legacy frontend components
        run: |
          echo "üîç Checking for banned legacy frontend components and routes..."
          
          # Define banned legacy frontend files
          BANNED_FRONTEND_FILES=(
            "src/app/agents/create/page.tsx"
            "src/app/components/RecordingGuide.tsx"
            "src/lib/enhanced-llm-service.ts"
            "src/lib/enhanced-recorder-fixed.ts"
            "src/lib/hooks/use-enhanced-recording.ts"
          )
          
          # Check for banned frontend files
          FAILED_CHECKS=0
          
          for file in "${BANNED_FRONTEND_FILES[@]}"; do
            echo "Checking for: $file"
            if [ -f "$file" ]; then
              echo "‚ùå Found banned legacy frontend file: $file"
              FAILED_CHECKS=1
            else
              echo "‚úÖ No legacy file found: $file"
            fi
          done
          
          # Check for banned imports
          BANNED_IMPORTS=(
            "enhanced-recorder-fixed"
            "use-enhanced-recording"
            "RecordingGuide"
            "enhanced-llm-service"
          )
          
          for import in "${BANNED_IMPORTS[@]}"; do
            echo "Checking for import: $import"
            if grep -r -i "from.*$import\|import.*$import" --include="*.ts" --include="*.tsx" src/; then
              echo "‚ùå Found banned legacy import: $import"
              FAILED_CHECKS=1
            else
              echo "‚úÖ No legacy import found: $import"
            fi
          done
          
          # Verify new workflow components exist
          REQUIRED_COMPONENTS=(
            "src/app/components/workflows/WorkflowReplay.tsx"
            "src/app/components/workflows/LogicEditor.tsx"
            "src/app/components/workflows/RunConsole.tsx"
            "src/app/components/workflows/VariableConfigModal.tsx"
            "src/app/components/workflows/ScheduleEditor.tsx"
            "src/app/agents/[id]/review.tsx"
            "src/app/agents/[id]/runs.tsx"
          )
          
          for component in "${REQUIRED_COMPONENTS[@]}"; do
            if [ -f "$component" ]; then
              echo "‚úÖ Found required component: $component"
            else
              echo "‚ùå Missing required component: $component"
              FAILED_CHECKS=1
            fi
          done
          
          if [ $FAILED_CHECKS -eq 1 ]; then
            echo "‚ùå Legacy frontend check failed!"
            exit 1
          else
            echo "‚úÖ All legacy frontend checks passed!"
          fi

  integration-tests:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Run integration tests
        run: ./scripts/run-integration-tests.sh
        env:
          NODE_ENV: test
          DATABASE_URL: "file:./test.db"
          ENCRYPTION_KEY: "test-encryption-key-32-chars-long"
          NEXTAUTH_SECRET: "test-nextauth-secret"
          NEXTAUTH_URL: "http://localhost:3000"
          REDIS_HOST: "localhost"
          REDIS_PORT: "6379"

  build-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, dead-code-detection, legacy-documentation-check, legacy-frontend-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        run: npm run build

      - name: Check build artifacts
        run: |
          if [ -d ".next" ]; then
            echo "‚úÖ Production build successful"
            ls -la .next/
          else
            echo "‚ùå Production build failed"
            exit 1
          fi
