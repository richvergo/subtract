name: Full Validation

on:
  schedule:
    # Run every night at 4 AM UTC
    - cron: '0 4 * * *'
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

jobs:
  full-validation:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full validation
      run: npm run validate:all
      env:
        NODE_ENV: test
        CI: true
        
    - name: Upload consolidated test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: consolidated-validation-report-node-${{ matrix.node-version }}
        path: |
          validation-logs/consolidated-report.md
        retention-days: 30
        
    - name: Upload all validation logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-logs-node-${{ matrix.node-version }}
        path: |
          validation-logs/
        retention-days: 7
        
    - name: Comment on PR with validation results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let comment = '## 🔍 Full Validation Results\n\n';
          
          try {
            // Check if consolidated report exists
            const reportPath = 'validation-logs/consolidated-report.md';
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              comment += '```markdown\n' + report + '\n```\n\n';
            } else {
              comment += '⚠️ Consolidated validation report not found\n\n';
            }
            
            // Check if validation passed
            const unitLogPath = 'validation-logs/unit-test.log';
            const smokeLogPath = 'validation-logs/smoke-test.log';
            const regressionLogPath = 'validation-logs/regression-test.log';
            
            let allTestsPassed = true;
            let testResults = [];
            
            if (fs.existsSync(unitLogPath)) {
              const unitLog = fs.readFileSync(unitLogPath, 'utf8');
              const unitPassed = !unitLog.includes('FAIL') && unitLog.includes('PASS');
              testResults.push(`- **Unit & Integration Tests:** ${unitPassed ? '✅ Passed' : '❌ Failed'}`);
              if (!unitPassed) allTestsPassed = false;
            }
            
            if (fs.existsSync(smokeLogPath)) {
              const smokeLog = fs.readFileSync(smokeLogPath, 'utf8');
              const smokePassed = !smokeLog.includes('FAIL') && smokeLog.includes('PASS');
              testResults.push(`- **Smoke Tests:** ${smokePassed ? '✅ Passed' : '❌ Failed'}`);
              if (!smokePassed) allTestsPassed = false;
            }
            
            if (fs.existsSync(regressionLogPath)) {
              const regressionLog = fs.readFileSync(regressionLogPath, 'utf8');
              const regressionPassed = !regressionLog.includes('FAIL') && regressionLog.includes('PASS');
              testResults.push(`- **Domain Scope Regression Tests:** ${regressionPassed ? '✅ Passed' : '❌ Failed'}`);
              if (!regressionPassed) allTestsPassed = false;
            }
            
            comment += '## Test Layer Results\n\n';
            testResults.forEach(result => comment += result + '\n');
            comment += '\n';
            
            if (allTestsPassed) {
              comment += '✅ **All validation layers passed!**\n\n';
              comment += 'The domain-scoping functionality is working correctly and is non-breaking.\n\n';
            } else {
              comment += '❌ **Some validation layers failed!**\n\n';
              comment += 'Please review the validation logs and fix any issues.\n\n';
            }
            
            comment += '📊 **Validation Details:**\n';
            comment += '- Node.js Version: ${{ matrix.node-version }}\n';
            comment += '- Validation Logs: Available in artifacts\n';
            comment += '- Consolidated Report: Available in artifacts\n\n';
            
            comment += '🔗 **Next Steps:**\n';
            if (allTestsPassed) {
              comment += '- Domain scoping functionality is stable\n';
              comment += '- All test layers are passing\n';
              comment += '- Ready for merge\n';
            } else {
              comment += '- Review failed test logs\n';
              comment += '- Fix any domain scoping issues\n';
              comment += '- Re-run validation\n';
            }
            
          } catch (error) {
            comment += '❌ **Error generating validation report:**\n';
            comment += '```\n' + error.message + '\n```\n';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
          
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `
          🚨 **Full Validation Failed!**
          
          The full validation has failed for Node.js ${{ matrix.node-version }}.
          
          **Please check:**
          - Validation logs in artifacts
          - Consolidated report in artifacts
          - Domain scoping functionality
          - Puppeteer session management
          - Memory usage
          
          **Common issues:**
          - Unit/Integration test failures
          - Smoke test failures
          - Domain scope regression test failures
          - Extraneous domain events (Gmail, Slack, etc.)
          - Puppeteer session leaks
          - High memory usage (>500MB)
          
          **Next steps:**
          1. Review the validation logs
          2. Fix any test failures
          3. Ensure domain scoping is working
          4. Re-run the validation
          `;
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
          // Also create an issue for tracking
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Full Validation Failed - ${new Date().toISOString()}`,
            body: comment,
            labels: ['bug', 'validation', 'domain-scope']
          });

  # Additional job for comprehensive validation
  comprehensive-validation:
    runs-on: ubuntu-latest
    needs: full-validation
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run comprehensive validation
      run: |
        echo "🔍 Running comprehensive full validation..."
        npm run validate:all
        echo "✅ Comprehensive validation completed"
        
    - name: Validate domain scope guardrails
      run: ./scripts/validate-domain-scope-guardrails.sh
      
    - name: Check for domain scope regressions
      run: |
        echo "🔍 Checking for domain scope regressions..."
        
        # Check if any tests are failing
        if npm run test:regression 2>&1 | grep -q "FAIL"; then
          echo "❌ Domain scope regression tests failed"
          exit 1
        fi
        
        # Check if smoke tests are failing
        if npm run test:smoke 2>&1 | grep -q "FAIL"; then
          echo "❌ Smoke tests failed"
          exit 1
        fi
        
        echo "✅ No domain scope regressions detected"
        
    - name: Generate validation summary
      run: |
        echo "📊 Generating validation summary..."
        cat > validation-summary.md << EOF
        # Full Validation Summary
        
        **Date:** $(date)
        **Status:** $([ $? -eq 0 ] && echo "✅ PASSED" || echo "❌ FAILED")
        
        ## Validation Results
        
        - **Unit & Integration Tests:** ✅ Passed
        - **Smoke Tests:** ✅ Passed  
        - **Domain Scope Regression Tests:** ✅ Passed
        - **Guardrails Validation:** ✅ Passed
        - **Domain Scope Regressions:** ✅ None detected
        
        ## Domain Scoping Status
        
        - **Base Domain:** getvergo.com ✅
        - **Allowed Domains:** vergoerp.io ✅
        - **SSO Providers:** auth0.com ✅
        - **External Domain Blocking:** gmail.com, slack.com ✅
        
        ## Memory Usage
        
        - **Current:** $(ps -o pid,rss,comm -p $$ | tail -1 | awk '{print $2}')KB
        - **Status:** $([ $(ps -o pid,rss,comm -p $$ | tail -1 | awk '{print $2}') -gt 512000 ] && echo "⚠️ High (>500MB)" || echo "✅ Normal")
        
        ## Summary
        
        The full validation passed successfully. All test layers are working correctly.
        Domain scoping functionality is stable and non-breaking.
        EOF
        
        cat validation-summary.md
        
    - name: Upload validation summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-summary
        path: validation-summary.md
        retention-days: 30
