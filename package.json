{
  "name": "vergo-automation-platform",
  "version": "0.3.0",
  "description": "AI Agent Automation Platform",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:unit": "jest --testPathPatterns='test_(crypto|schemas|rbac)'",
    "test:api": "jest --testPathPatterns=test_api_",
    "test:worker": "jest --testPathPatterns=test_worker",
    "test:confirmation": "jest --testPathPatterns=test_agent_confirmation",
    "test:logins-protection": "jest --testPathPatterns=test_logins_protection",
    "test:e2e": "jest --testPathPatterns=test_e2e --verbose --runInBand",
    "test:e2e:watch": "jest --testPathPatterns=test_e2e --watch --runInBand",
    "test:all": "jest --runInBand",
    "test:frontend": "jest --testPathPatterns=tests/frontend --verbose",
    "test:connection": "jest --testPathPatterns='connectionCheck|ConnectionValidator' --verbose",
    "test:smoke": "jest --config jest.smoke.config.js",
    "test:regression": "jest tests/agents/capture/DomainScopeRegression.test.ts --runInBand",
    "test:full": "npm run test && npm run test:smoke && npm run test:regression",
    "validate:domain-scope": "./scripts/run-domain-scope-validation.sh",
    "validate:all": "bash scripts/run-full-validation.sh",
    "precommit:validate": "bash scripts/precommit-validate.sh",
    "precommit:final": "DOMAIN_SCOPE_DEBUG=true bash scripts/precommit-final-check.sh",
    "validate-api-contract": "./scripts/validate-api-contract.sh",
    "pre-commit": "npm run lint && npm run type-check && npm run test:unit && npm run test:logins-protection && npm run validate-api-contract",
    "type-check": "tsc --noEmit",
    "lint:fix": "eslint . --fix --ext .ts,.tsx",
    "schema-check": "npx prisma generate && npx tsc --noEmit",
    "lint:unused": "eslint . --ext .ts,.tsx --rule 'unused-imports/no-unused-imports: error'",
    "coverage": "jest --coverage",
    "coverage:threshold": "jest --coverage --coverageThreshold.global.branches=80 --coverageThreshold.global.functions=80 --coverageThreshold.global.lines=80 --coverageThreshold.global.statements=80",
    "dead-code": "npx depcheck",
    "check-legacy-docs": "./scripts/check-legacy-docs.sh",
    "check-legacy-frontend": "./scripts/check-legacy-frontend.sh",
    "check-workflowreplay-guardrails": "./scripts/check-workflowreplay-guardrails.sh",
    "check-variableconfigmodal-guardrails": "./scripts/check-variableconfigmodal-guardrails.sh",
    "check-domain-scope-guardrails": "./scripts/validate-domain-scope-guardrails.sh",
    "ci": "npm run lint && npm run type-check && npm run coverage:threshold && npm run dead-code && npm run check-legacy-docs && npm run check-legacy-frontend && npm run check-workflowreplay-guardrails && npm run check-variableconfigmodal-guardrails && npm run check-domain-scope-guardrails",
    "prepare": "husky"
  },
  "dependencies": {
    "@jest/globals": "^30.1.2",
    "@prisma/client": "^6.16.1",
    "@types/bcryptjs": "^2.4.6",
    "@types/crypto-js": "^4.2.2",
    "bcryptjs": "^3.0.2",
    "crypto-js": "^4.2.0",
    "express": "^5.1.0",
    "ioredis": "^5.8.0",
    "next": "15.5.2",
    "next-auth": "^4.24.11",
    "prisma": "^6.15.0",
    "puppeteer": "^24.20.0",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "sharp": "^0.34.4",
    "swr": "^2.2.5",
    "zod": "^4.1.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^30.0.0",
    "@types/jsdom": "^21.1.7",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "audit-ci": "^7.1.0",
    "depcheck": "^1.4.7",
    "eslint": "^9",
    "eslint-config-next": "15.5.2",
    "eslint-plugin-unused-imports": "^4.2.0",
    "husky": "^9.1.7",
    "ioredis-mock": "^8.9.0",
    "jest-environment-jsdom": "^30.1.2",
    "jsdom": "^27.0.0",
    "ts-jest": "^29.4.1",
    "tsx": "^4.20.5",
    "typescript": "^5"
  },
  "prisma": {
    "seed": "tsx prisma/seed.ts"
  }
}
