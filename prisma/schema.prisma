generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String           @id @default(cuid())
  email        String           @unique
  passwordHash String
  name         String?
  createdAt    DateTime         @default(now())
  agents       Agent[]
  logins       Login[]
  memberships  Membership[]
  tasks        Task[]
}

model Entity {
  id          String       @id @default(cuid())
  name        String
  createdAt   DateTime     @default(now())
  memberships Membership[]
}

model Membership {
  id       String @id @default(cuid())
  userId   String
  entityId String
  role     Role   @default(EMPLOYEE)
  entity   Entity @relation(fields: [entityId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, entityId])
}

model Login {
  id             String       @id @default(cuid())
  name           String
  loginUrl       String
  username       String
  password       String?
  oauthToken     String?
  status         LoginStatus  @default(UNKNOWN)
  lastCheckedAt  DateTime?
  lastSuccessAt  DateTime?
  lastFailureAt  DateTime?
  failureCount   Int          @default(0)
  errorMessage   String?
  ownerId        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  customConfig   String?
  templateId     String?
  sessionData    String?
  sessionExpiry  DateTime?
  recordingUrl   String?
  analysisStatus String?      @default("pending") // pending, processing, completed, failed
  analysisResult String?      // JSON string containing analysis results
  agentLogins    AgentLogin[]
  owner          User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Agent {
  id                 String       @id @default(cuid())
  name               String
  description        String?
  purposePrompt      String
  agentConfig        String?
  agentIntents       String?
  status             AgentStatus  @default(DRAFT)
  processingStatus   String       @default("processing")
  processingProgress Int?
  // recordingPath removed - using screen recording approach instead
  ownerId            String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  recordingUrl       String?
  audioUrl           String?
  llmSummary         String?
  userContext        String?
  eventLog           String?
  transcript         String?
  owner              User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  agentLogins        AgentLogin[]
  agentRuns          AgentRun[]
  events             Event[]
  tasks              Task[]
}

model AgentLogin {
  id      String @id @default(cuid())
  agentId String
  loginId String
  login   Login  @relation(fields: [loginId], references: [id], onDelete: Cascade)
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@unique([agentId, loginId])
}

model AgentRun {
  id                   String    @id @default(cuid())
  agentId              String
  status               RunStatus @default(PENDING)
  startedAt            DateTime  @default(now())
  finishedAt           DateTime?
  result               String?
  error                String?
  logs                 String?
  screenshot           String?
  prompt               String?
  requiresConfirmation Boolean   @default(false)
  confirmationData     String?
  confirmedAt          DateTime?
  confirmedBy          String?
  userConfirmed        Boolean   @default(false)
  userFeedback         String?
  agent                Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, startedAt])
}

model Task {
  id          String     @id @default(cuid())
  name        String
  description String?
  agentId     String
  userId      String
  parameters  String?
  schedule    String?
  priority    String     @default("normal")
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  startedAt   DateTime?
  finishedAt  DateTime?
  result      String?
  error       String?
  logs        String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent       Agent      @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([agentId, status])
}

// AgentRecording model removed - using screen recording approach instead

model Event {
  id            String   @id @default(cuid())
  agentId       String
  step          Int
  action        String
  target        String?
  value         String?
  url           String?
  elementType   String?
  elementText   String?
  screenshotUrl String?
  createdAt     DateTime @default(now())
  agent         Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, step])
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum LoginStatus {
  UNKNOWN
  ACTIVE
  NEEDS_RECONNECT
  DISCONNECTED
  BROKEN
  EXPIRED
  SUSPENDED
  READY_FOR_AGENTS
  NEEDS_TESTING
}

enum AgentStatus {
  DRAFT
  ACTIVE
  REJECTED
  INACTIVE
}

enum RunStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  REQUIRES_CONFIRMATION
  CONFIRMED
  REJECTED
}

enum TaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

model ExecutionMetrics {
  id              String   @id @default(cuid())
  agentId         String
  taskId          String
  startTime       DateTime
  endTime         DateTime
  duration        Int      // in milliseconds
  totalSteps      Int
  successfulSteps Int
  failedSteps     Int
  retryAttempts   Int
  errors          String?  // JSON array of error messages
  screenshots     String?  // JSON array of screenshot paths
  repairs         String?  // JSON array of repair attempts
  successRate     Float
  performanceScore Float
  createdAt       DateTime @default(now())
}
