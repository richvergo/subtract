generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Completely simplified schema - NO foreign key constraints, NO ownerId
model Workflow {
  id            String        @id @default(cuid())
  name          String
  description   String?
  status        WorkflowStatus @default(DRAFT)
  version       String        @default("1.0.0")
  requiresLogin Boolean       @default(false)
  loginConfig   Json?         
  isTaskTemplate Boolean      @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  logicSpec     Json          
  metadata      Json?         
}

model WorkflowAction {
  id         String   @id @default(cuid())
  workflowId String
  action     Json     
  order      Int
  screenshotUrl String? 
  selectorBox Json?     
  annotations Json?     
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WorkflowVariable {
  id         String   @id @default(cuid())
  workflowId String
  variable   Json     
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WorkflowRun {
  id         String        @id @default(cuid())
  workflowId String
  status     RunStepStatus @default(PENDING)
  startedAt  DateTime      @default(now())
  finishedAt DateTime?
  variables  Json?         
  result     Json?         
  error      String?       
  logs       Json?         
  metadata   Json?         
}

model WorkflowRunStep {
  id         String        @id @default(cuid())
  runId      String
  actionId   String
  status     RunStepStatus @default(PENDING)
  startedAt  DateTime      @default(now())
  finishedAt DateTime?
  result     Json?         
  error      String?       
  logs       Json?         
  metadata   Json?         
}

model WorkflowSchedule {
  id         String   @id @default(cuid())
  workflowId String
  name       String
  cron       String   
  timezone   String   @default("UTC")
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WorkflowTask {
  id            String     @id @default(cuid())
  workflowId    String     
  name          String
  description   String?
  variableValues Json?     
  assignee      String?    
  status        WorkflowTaskStatus @default(PENDING)
  schedule      Json?      
  logs          Json?      
  createdAt     DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
  ERROR
  TESTING
}

enum RunStepStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  SKIPPED
  RETRYING
}

enum WorkflowTaskStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}